library(readr)
library(readr)
Salaries <- read_csv("C:/Users/MetteMarie/Downloads/Salaries.csv")
View(Salaries)
library(readr)
# import data from a comma delimited file
Salaries <- read_csv("salaries.csv")
library(readr)
Salaries <- read_csv("salaries.csv")
Salaries <- read_csv("salaries.csv")
Salaries <- read_tsv("salaries.txt")
Salaries <- read_tsv("salaries.txt")
data <- select(Salaries, rank)
library(dplyr)
install.packages("dplyr")
library(dplyr)
data <- select(Salaries, rank)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(data = Salaries, mapping = aes(x = rank, y = sex))
ggplot(data = Salaries, mapping = aes(x = rank, y = sex) + geom_point())
ggplot(data = Salaries, mapping = aes(x = rank, y = sex)) + geom_point()
ggplot(data = Salaries, mapping = aes(x = discipline, y = sex)) + geom_point()
ggplot(data = Salaries, mapping = aes(x = yrs.since.phd, y = sex)) + geom_point()
print(i)
setwd("~/DataVisualization/G2DV")
#Type in your data path
data_app <- read_csv("USEnergy.csv", show_col_types = FALSE, na = "Not Available")
setwd("~/DataVisualization/G2DV")
library(shiny)
library(shinyWidgets)
library(dslabs)
library(tidyverse)
library(plotly)
library(tidyr)
#Type in your data path
data_app <- read_csv("USEnergy.csv", show_col_types = FALSE, na = "Not Available")
#remove missing values
data_app <- data_app[,-12:-14]
setnafill(data_app, fill = 0)
library(tidyr)
setnafill(data_app, fill = 0)
library(tidyverse)
library(plotly)
library(tidyr)
library(dslabs)
library(shinyWidgets)
library(shiny)
setnafill(data_app, fill = 0)
install.packages("data.table")
install.packages("data.table")
#remove missing values
data_app <- data_app[,-12:-14]
setnafill(data_app, fill = 0)
na.omit(data_app)
head(data_app)
test <- gather(data_app, key = "Type", value = "Value", -Year)
library(shiny)
library(shinyWidgets)
library(dslabs)
library(tidyverse)
library(plotly)
library(tidyr)
#Change working directory
setwd("C:/Users/Mette/Documents/DataVisualization/G2DV")
#remove missing values
data_app <- data_app[,-12:-14]
setnafill(data_app, fill = 0)
setnafill(data_app, fill = 0)
ggplot(test, aes(x=Year, y=Value, color = Type)) + geom_line(linewidth = 1) + xlab("Year") +
ylab("Quadrillion Btu") +
ggtitle("Energy production in the US 1973-2022") + theme_bw() + ylim(c(0,3.2)) + xlim(c(1973,2022))
library(dplyr)
test <- gather(data_app, key = "Type", value = "Value", -Year)
ggplot(test, aes(x=Year, y=Value, color = Type)) + geom_line(linewidth = 1) + xlab("Year") +
ylab("Quadrillion Btu") +
ggtitle("Energy production in the US 1973-2022") + theme_bw() + ylim(c(0,3.2)) + xlim(c(1973,2022))
ui <- fluidPage(
titlePanel("Energy production in the US 1973-2022"),
sidebarLayout(
sidebarPanel(
#Checkboxinput group
checkboxGroupInput("energyProductionInput", label = "Select types of energy:",
choices = c("CoalProduction",
"NaturalGasProduction",
"CrudeOilProduction",
"NaturalGasPlantLiquidsProduction",
"NuclearElectricPowerProduction",
"HydroelectricPowerProduction",
"GeothermalEnergyProduction",
"SolarEnergyProduction",
"WindEnergyProduction",
"BiomassEnergyProduction"),
selected = c("CoalProduction",
"NaturalGasProduction",
"CrudeOilProduction",
"NaturalGasPlantLiquidsProduction",
"NuclearElectricPowerProduction",
"HydroelectricPowerProduction",
"GeothermalEnergyProduction",
"SolarEnergyProduction",
"WindEnergyProduction",
"BiomassEnergyProduction")),
#year slider
sliderInput("yearInput", "Year", min = 1973, max = 2022, value = c(1990,2022), sep = ""),
),
mainPanel(
plotOutput("timeSeriesPlot"),
br(),
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
dataInput1 <- reactive({ test %>% filter(
Type == input$energyProductionInput,
Year >= input$yearInput[1],
Year <= input$yearInput[2])
})
#Render functions
output$timeSeriesPlot <- renderPlot({
ggplot(dataInput1(), aes(x=Year, y=Value, color = Type)) + geom_line(linewidth = 1) + xlab("Year") +
ylab("Quadrillion Btu") +
ggtitle("Energy production in the US 1973-2022") + theme_bw() + ylim(c(0,3.2)) + xlim(c(1973,2022))
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Energy production in the US 1973-2022"),
sidebarLayout(
sidebarPanel(
#Checkboxinput group
checkboxGroupInput("energyProductionInput", label = "Select types of energy:",
choices = c("CoalProduction",
"NaturalGasProduction",
"CrudeOilProduction",
"NaturalGasPlantLiquidsProduction",
"NuclearElectricPowerProduction",
"HydroelectricPowerProduction",
"GeothermalEnergyProduction",
"SolarEnergyProduction",
"WindEnergyProduction",
"BiomassEnergyProduction"),
selected = c("CoalProduction")),
#year slider
sliderInput("yearInput", "Year", min = 1973, max = 2022, value = c(1990,2022), sep = ""),
),
mainPanel(
plotOutput("timeSeriesPlot"),
br(),
)
)
)
ui <- fluidPage(
titlePanel("Energy production in the US 1973-2022"),
sidebarLayout(
sidebarPanel(
#Checkboxinput group
checkboxGroupInput("energyProductionInput", label = "Select types of energy:",
choices = c("CoalProduction",
"NaturalGasProduction",
"CrudeOilProduction",
"NaturalGasPlantLiquidsProduction",
"NuclearElectricPowerProduction",
"HydroelectricPowerProduction",
"GeothermalEnergyProduction",
"SolarEnergyProduction",
"WindEnergyProduction",
"BiomassEnergyProduction"),
selected = c("CoalProduction")),
#year slider
sliderInput("yearInput", "Year", min = 1973, max = 2022, value = c(1973,2022), sep = ""),
),
mainPanel(
plotOutput("timeSeriesPlot"),
br(),
)
)
)
# Run the application
shinyApp(ui = ui, server = server)
dataInput1 <- reactive({ test %>% filter(
Value == input$energyProductionInput,
Year >= input$yearInput[1],
Year <= input$yearInput[2])
})
# Define server logic required to draw a histogram
server <- function(input, output) {
dataInput1 <- reactive({ test %>% filter(
Value == input$energyProductionInput,
Year >= input$yearInput[1],
Year <= input$yearInput[2])
})
#Render functions
output$timeSeriesPlot <- renderPlot({
ggplot(dataInput1(), aes(x=Year, y=Value, color = Type)) + geom_line(linewidth = 1) + xlab("Year") +
ylab("Quadrillion Btu") +
ggtitle("Energy production in the US 1973-2022") + theme_bw() + ylim(c(0,3.2)) + xlim(c(1973,2022))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
dataInput1 <- reactive({ test %>% filter(
Type <= input$energyProductionInput,
Year >= input$yearInput[1],
Year <= input$yearInput[2])
})
#Render functions
output$timeSeriesPlot <- renderPlot({
ggplot(dataInput1(), aes(x=Year, y=Value, color = Type)) + geom_line(linewidth = 1) + xlab("Year") +
ylab("Quadrillion Btu") +
ggtitle("Energy production in the US 1973-2022") + theme_bw() + ylim(c(0,3.2)) + xlim(c(1973,2022))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
dataInput1 <- reactive({ test %>% filter(
Type >= input$energyProductionInput,
Year >= input$yearInput[1],
Year <= input$yearInput[2])
})
#Render functions
output$timeSeriesPlot <- renderPlot({
ggplot(dataInput1(), aes(x=Year, y=Value, color = Type)) + geom_line(linewidth = 1) + xlab("Year") +
ylab("Quadrillion Btu") +
ggtitle("Energy production in the US 1973-2022") + theme_bw() + ylim(c(0,3.2)) + xlim(c(1973,2022))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
dataInput1 <- reactive({ test %>% filter(
Type <= input$energyProductionInput,
Year >= input$yearInput[1],
Year <= input$yearInput[2])
})
#Render functions
output$timeSeriesPlot <- renderPlot({
ggplot(dataInput1(), aes(x=Year, y=Value, color = Type)) + geom_line(linewidth = 1) + xlab("Year") +
ylab("Quadrillion Btu") +
ggtitle("Energy production in the US 1973-2022") + theme_bw() + ylim(c(0,3.2)) + xlim(c(1973,2022))
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Energy production in the US 1973-2022"),
sidebarLayout(
sidebarPanel(
#Checkboxinput group
checkboxGroupInput("energyProductionInput", label = "Select types of energy:",
choices = c("CoalProduction",
"NaturalGasProduction",
"CrudeOilProduction",
"NaturalGasPlantLiquidsProduction",
"NuclearElectricPowerProduction",
"HydroelectricPowerProduction",
"GeothermalEnergyProduction",
"SolarEnergyProduction",
"WindEnergyProduction",
"BiomassEnergyProduction"),
selected = c("CoalProduction",
"NaturalGasProduction",
"CrudeOilProduction",
"NaturalGasPlantLiquidsProduction",
"NuclearElectricPowerProduction",
"HydroelectricPowerProduction",
"GeothermalEnergyProduction",
"SolarEnergyProduction",
"WindEnergyProduction",
"BiomassEnergyProduction")),
#year slider
sliderInput("yearInput", "Year", min = 1973, max = 2022, value = c(1973,2022), sep = ""),
),
mainPanel(
plotOutput("timeSeriesPlot"),
br(),
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
dataInput1 <- reactive({ test %>% filter(
Type <= input$energyProductionInput,
Year >= input$yearInput[1],
Year <= input$yearInput[2])
})
#Render functions
output$timeSeriesPlot <- renderPlot({
ggplot(dataInput1(), aes(x=Year, y=Value, color = Type)) + geom_line(linewidth = 1) + xlab("Year") +
ylab("Quadrillion Btu") +
ggtitle("Energy production in the US 1973-2022") + theme_bw() + ylim(c(0,3.2)) + xlim(c(1973,2022))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
dataInput1 <- reactive({ test %>% filter(
Type >= input$energyProductionInput,
Year >= input$yearInput[1],
Year <= input$yearInput[2])
})
#Render functions
output$timeSeriesPlot <- renderPlot({
ggplot(dataInput1(), aes(x=Year, y=Value, color = Type)) + geom_line(linewidth = 1) + xlab("Year") +
ylab("Quadrillion Btu") +
ggtitle("Energy production in the US 1973-2022") + theme_bw() + ylim(c(0,3.2)) + xlim(c(1973,2022))
})
}
# Run the application
shinyApp(ui = ui, server = server)
dataInput1 <- reactive({ test %>% filter(
Type = input$energyProductionInput,
Year >= input$yearInput[1],
Year <= input$yearInput[2])
})
# Define server logic required to draw a histogram
server <- function(input, output) {
dataInput1 <- reactive({ test %>% filter(
Type = input$energyProductionInput,
Year >= input$yearInput[1],
Year <= input$yearInput[2])
})
#Render functions
output$timeSeriesPlot <- renderPlot({
ggplot(dataInput1(), aes(x=Year, y=Value, color = Type)) + geom_line(linewidth = 1) + xlab("Year") +
ylab("Quadrillion Btu") +
ggtitle("Energy production in the US 1973-2022") + theme_bw() + ylim(c(0,3.2)) + xlim(c(1973,2022))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
dataInput1 <- reactive({ test %>% filter(
Type == input$energyProductionInput,
Year >= input$yearInput[1],
Year <= input$yearInput[2])
})
#Render functions
output$timeSeriesPlot <- renderPlot({
ggplot(dataInput1(), aes(x=Year, y=Value, color = Type)) + geom_line(linewidth = 1) + xlab("Year") +
ylab("Quadrillion Btu") +
ggtitle("Energy production in the US 1973-2022") + theme_bw() + ylim(c(0,3.2)) + xlim(c(1973,2022))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
dataInput1 <- reactive({ test %>% filter(
Type == input$energyProductionInput,
Year = input$yearInput[1],
Year = input$yearInput[2])
})
#Render functions
output$timeSeriesPlot <- renderPlot({
ggplot(dataInput1(), aes(x=Year, y=Value, color = Type)) + geom_line(linewidth = 1) + xlab("Year") +
ylab("Quadrillion Btu") +
ggtitle("Energy production in the US 1973-2022") + theme_bw() + ylim(c(0,3.2)) + xlim(c(1973,2022))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
dataInput1 <- reactive({ test %>% filter(
Type == input$energyProductionInput,
Year == input$yearInput[1],
Year == input$yearInput[2])
})
#Render functions
output$timeSeriesPlot <- renderPlot({
ggplot(dataInput1(), aes(x=Year, y=Value, color = Type)) + geom_line(linewidth = 1) + xlab("Year") +
ylab("Quadrillion Btu") +
ggtitle("Energy production in the US 1973-2022") + theme_bw() + ylim(c(0,3.2)) + xlim(c(1973,2022))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
dataInput1 <- reactive({ test %>% filter(
Type %in% input$energyProductionInput,
Year >= input$yearInput[1],
Year <= input$yearInput[2])
})
#Render functions
output$timeSeriesPlot <- renderPlot({
ggplot(dataInput1(), aes(x=Year, y=Value, color = Type)) + geom_line(linewidth = 1) + xlab("Year") +
ylab("Quadrillion Btu") +
ggtitle("Energy production in the US 1973-2022") + theme_bw() + ylim(c(0,3.2)) + xlim(c(1973,2022))
})
}
# Run the application
shinyApp(ui = ui, server = server)
