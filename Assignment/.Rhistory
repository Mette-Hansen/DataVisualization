clear
install.packages("rcartcolor")
install.packages("rcartocolor")
asia <- read.csv("C:/Users/Mette/Downloads/asia.xlsx", sep="")
View(asia)
View(asia)
gc()
library(readxl)
asia <- read_excel("asia.xlsx")
View(asia)
library(readxl)
asia <- read_excel("asia.xlsx")
view(asia)
iew(asia)
View(asia)
ggplot(asia)
ggplot2(asia)
library(ggplot2)
asia <- read_excel("asia.xlsx")
View(asia)
ggplot2(asia)
ggplot(asia)
ggplot(asia) + geom_line(mapping = aes(x = year, y = gdpPercap, group=country))
ggplot(asia) + geom_line(mapping = aes(x = year, y = gdpPercap, color=country))
library(readxl)
library(ggplot2)
asia <- read_excel("asia.xlsx")
View(asia)
ggplot(asia) + geom_line(mapping = aes(x = year, y = gdpPercap, group=country))
ggplot(asia) + geom_line(mapping = aes(x = year, y = gdpPercap, color=country))
clear
# Dotted lines
ggplot(asia) + geom_line(mapping = aes(x = year, y = gdpPercap, linetype=country))
# Dotted lines
ggplot(asia) + geom_line(mapping = aes(x = year, y = gdpPercap, linetype=country, color = country))
gc()
anim_save()
install.packages("gganimate")
anim_save()
install.packages("gapminder")
install.packages("gganimate")
install.packages(gganimate)
library(gganimate)
library(gapminder)
install.packages("gifski")
install.packages("av")
library(gganimate)
library(gapminder)
install.packages("shiny")
library(shiny)
runExample("01_hello")
source("~/DataVisualization/Countries/asia.R")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='dv-group2', token='D18FA4D1C5E55F6E0DD62A625E450764', secret='eWMGY6ucxVIccVmF/sh+h0kertAsE1e/kSyd4SNg')
runApp('DataVisualization/G2DV')
library(shiny)
library(shiny)
library(tidyverse)
`DataExerciseShinyApps.(1)` <- read.csv("~/DataVisualization/G2DV/DataExerciseShinyApps (1).csv", header=FALSE)
View(`DataExerciseShinyApps.(1)`)
#type in your data path
dat<-read_csv(`DataExerciseShinyApps.(1)`)
View(`DataExerciseShinyApps.(1)`)
DataExerciseShinyApps <- read.csv("~/DataVisualization/G2DV/DataExerciseShinyApps.csv", header=FALSE)
View(DataExerciseShinyApps)
#type in your data path
dat<-read_csv(DataExerciseShinyApps)
#type in your data path
dat<-read_csv("DataExerciseShinyApps")
ls
pwdr
#type in your data path
dat<-read_csv("./DataVisualization/G2DV/DataExerciseShinyApps")
#type in your data path
dat<-read_csv("DataExerciseShinyApps")
DataExerciseShinyApps <- read.csv("~/DataExerciseShinyApps.csv", header=FALSE)
View(DataExerciseShinyApps)
#type in your data path
dat<-read_csv("DataExerciseShinyApps")
#type in your data path
dat<-read_csv(DataExerciseShinyApps)
getwd()
#type in your data path
dat<-read_csv("C:\Users\Mette\Documents\DataExerciseShinyApps.csv")
#type in your data path
dat<-read_csv("C:/Users/Mette/Documents/DataExerciseShinyApps.csv")
dat<- dat %>% select(c("pid7","ideo5"))
#remove missing values
dat<-drop_na(dat)
ui <-
server<-function(input,output){
}
shinyApp(ui,server)
#remove missing values
dat<-drop_na(dat)
ui <-
server<-function(input,output){
}
shinyApp(ui,server)
#type in your data path
dat<-read_csv("C:/Users/Mette/Documents/DataExerciseShinyApps.csv")
dat<- dat %>% select(c("pid7","ideo5"))
?drop_na
#remove missing values
dat<-drop_na(dat)
ui <- fluidPage(
# Application title
titlePanel("Data Exercise"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
shinyApp(ui,server)
dat
server<-function(input,output){}
shinyApp(ui,server)
runApp('DataVisualization/G2DV/RcodeExerciseShinyApps (1).R')
runApp('DataVisualization/G2DV/RcodeExerciseShinyApps (1).R')
runApp('DataVisualization/G2DV/RcodeExerciseShinyApps (1).R')
# generate bins based on input$bins from ui.R
x    <- dat[, 2]
runApp('DataVisualization/G2DV/RcodeExerciseShinyApps (1).R')
library(shiny)
library(tidyverse)
#type in your data path
dat<-read_csv("C:/Users/Mette/Documents/DataExerciseShinyApps.csv")
dat<- dat %>% select(c("pid7","ideo5"))
#remove missing values
dat<-drop_na(dat)
ui <- fluidPage(
# Title
titlePanel("Data Excercise"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- dat[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Pid7',
main = 'Shiny Histogram')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# generate bins based on input$bins from ui.R
x    <- dat[]
runApp('DataVisualization/G2DV/RcodeExerciseShinyApps (1).R')
runApp('C:/Users/Mette/Downloads/CongressApp.R')
# generate bins based on input$bins from ui.R
x    <- dat[1]
runApp('DataVisualization/G2DV/RcodeExerciseShinyApps (1).R')
runExample("01_hello")      # a histogram
runExample("02_text")       # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("05_sliders")    # slider bars
# generate bins based on input$bins from ui.R
x    <- as.numeric(unlist(dat["pid7"]))
runApp('DataVisualization/G2DV/RcodeExerciseShinyApps (1).R')
runApp('DataVisualization/G2DV/RcodeExerciseShinyApps (1).R')
runApp('DataVisualization/G2DV/RcodeExerciseShinyApps (1).R')
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'hotpink', border = 'white',
xlab = 'Pid7',
main = 'Shiny Histogram')
runApp('DataVisualization/G2DV/RcodeExerciseShinyApps (1).R')
runApp('DataVisualization/G2DV/RcodeExerciseShinyApps (1).R')
runApp('DataVisualization/G2DV/RcodeExerciseShinyApps (1).R')
runApp('DataVisualization/G2DV/RcodeExerciseShinyApps (1).R')
dat["pid7"]
dat
y    <- as.numeric(unlist(dat["ideo5"]))
# generate bins based on input$bins from ui.R
x    <- as.numeric(unlist(dat["pid7","ideo5"]))
bins <- seq(min(x), max(x), length.out = input$bins + 1)
runApp('DataVisualization/G2DV/RcodeExerciseShinyApps (1).R')
# generate bins based on input$bins from ui.R
x    <- as.numeric(unlist(dat["pid7"]))
y    <- as.numeric(unlist(dat["ideo5"]))
?hist
dat["pid7","ideo5"]
dat["ideo5"]
x1    <- as.numeric(unlist(dat["ideo5"]))
library(shiny)
library(tidyverse)
#type in your data path
dat<-read_csv("C:/Users/Mette/Documents/DataExerciseShinyApps.csv")
dat<- dat %>% select(c("pid7","ideo5"))
#remove missing values
dat<-drop_na(dat)
ui <- fluidPage(
# Title
titlePanel("Data Excercise"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- as.numeric(unlist(dat["pid7"]))
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'hotpink', border = 'black',
xlab = 'Pid7',
main = 'Shiny Histogram')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('DataVisualization/G2DV/RcodeExerciseShinyApps (1).R')
runApp('DataVisualization/G2DV/RcodeExerciseShinyApps (1).R')
#type in your data path
dat<-read_csv("C:/Users/Mette\Documents/DataVisualization/G2DV/DataExerciseShinyApps.csv")
#type in your data path
dat<-read_csv("C:/Users/Mette/Documents/DataVisualization/G2DV/DataExerciseShinyApps.csv")
#type in your data path
dat<-read_csv("DataExerciseShinyApps.csv")
#####Import Data
#Change working directory
setwd("C:/Users/Mette/Documents/DataVisualization/G2DV")
#####Import Data
#Change working directory
setwd("C:/Users/Mette/Documents/DataVisualization/G2DV")
#Change working directory
setwd("C:/Users/Mette/Documents/DataVisualization/G2DV")
#type in your data path
dat<-read_csv("DataExerciseShinyApps.csv")
clear
cd ..
#Select 500 rows, and try only to work with that
setwd("C:/Users/Mette/Documents/DataVisualization/Assignment")
#Select 500 rows, and try only to work with that
#setwd("C:/Users/Mette/Documents/DataVisualization/Assignment")
library(csv)
#Select 500 rows, and try only to work with that
#setwd("C:/Users/Mette/Documents/DataVisualization/Assignment")
library(excel)
runExample("01_hello")      # a histogram
runExample("02_text")       # tables and data frames
runExample("03_reactivity") # a reactive expression
#Select 500 rows, and try only to work with that
#setwd("C:/Users/Mette/Documents/DataVisualization/Assignment")
library(readxl)
us.energy.mix.eia.1973.2022 <- read.csv("~/DataVisualization/Assignment/us-energy-mix-eia-1973-2022.csv")
View(us.energy.mix.eia.1973.2022)
data <- read_excel(us.energy.mix.eia.1973.2022)
data <- read_excel("us.energy.mix.eia.1973.2022")
USEnergy <- read.csv("~/DataVisualization/Assignment/USEnergy.csv")
View(USEnergy)
data <- read_excel("USEngergy")
data <- read_excel("./USEngergy")
data <- read_excel("./USEnergy")
data <- read_excel("USEnergy")
data <- read_excel("USEnergy.xslx")
data <- read_csv("USEnergy.csv")
summary(data)
test <- data[sample(1:nrow(data),500)]
test <- data[sample(1:nrow(data),20)]
test <- data[sample(1:nrow(data),14)]
test <- data[sample(1:nrow(data),10)]
rlang::last_error()
plot(data)
data <- data %>% select(c("Coal.Production","Total.Fossil.Fuels.Production"))
data <- data %>% select(c("Total.Fossil.Fuels.Production"))
data <- data %>% select(r("Total.Fossil.Fuels.Production"))
data <- data %>% select(nrow("Total.Fossil.Fuels.Production"))
data <- data %>% select(nrow("Coal.Production","Total.Fossil.Fuels.Production"))
data <- data %>% select(("Coal.Production","Total.Fossil.Fuels.Production"))
?select
View(USEnergy)
View(USEnergy)
data <- data %>% select(c(2))
#Select 500 rows, and try only to work with that
#setwd("C:/Users/Mette/Documents/DataVisualization/Assignment")
library(readx'l)
data <- read_csv("USEnergy.csv")
data <- data %>% select(c(2))
#Select 500 rows, and try only to work with that
#setwd("C:/Users/Mette/Documents/DataVisualization/Assignment")
library(readxl)
data <- read_csv("USEnergy.csv")
data <- data %>% select(c(2))
#type in your data path
dat<-read_csv("DataExerciseShinyApps.csv")
View(data)
columns <- select(data,Production.Coal)
.
clear
1
1
1
1
1
#Select 500 rows, and try only to work with that
#setwd("C:/Users/Mette/Documents/DataVisualization/Assignment")
library(readxl)
data <- read_csv("USEnergy.csv")
columns <- select(data,Production.Coal)
columns <- select(data,Production.Coal)
rlang::last_error()
data <- read_csv("USEnergy.csv")
spec()
spec(data)
columns <- select(data,3:4)
colums
columns
columns <- select(data,2:3)
columns <- select(data,2:3)
columns
ggplot(columns)
ggplot(columns, aes(x=data[2]))
data["Coal.Production"]
data[2]
x = data[2]
y = data[3]
ggplot(columns, aes(x=x,y=y))
ggplot(columns, aes(x=x,y=y)) + geom_point()
ggplot(data = data, aes(x=x,y=y)) + geom_point()
library(ggplot2)
data <- read_csv("USEnergy.csv")
columns <- select(data,2:3)
x = data[2]
y = data[3]
ggplot(data = data, aes(x=x,y=y)) + geom_point()
ggplot(data = data, aes(x=2,y=3)) + geom_point()
ggplot(data = data, aes(columns)) + geom_point()
ggplot(data = data)
ggplot(data = data) + geom_point()
data[1,]
library("data.table")
data <- fread("USEnergy.csv", select = c("Year"))
data <- fread("USEnergy.csv", select = c("Coal.Production"))
data <- fread("USEnergy.csv", select = c("coal.production"))
ggplot(data = data, x = data[[2]]) + geom_point()
data <- read_csv("USEnergy.csv")
ggplot(data = data, x = data[[2]], y = data[[3]]) + geom_point()
ggplot(data) + geom_line(mapping = aes(x = data[[2]], y = data[[3]]))
ggplot(data) + geom_line(mapping = aes(x = data[2], y = data[[3]]))
ggplot(data) + geom_line(mapping = aes(x = data[[2]], y = data[[3]]))
data[[2]]
ggplot(data) + geom_dotplot(mapping = aes(x = data[[2]], y = data[[3]]))
_line
ggplot(data) + geom_line(mapping = aes(x = data[[2]], y = data[[3]]))
ggplot(data) + geom_line(mapping = aes(x = data[[2]], y = data[[3]], color = year))
ggplot(data) + geom_line(mapping = aes(x = data[[2]], y = data[[3]], color = coal))
ggplot(data) + geom_line(mapping = aes(x = data[[2]], y = data[[3]], color = coal.production))
ggplot(data) + geom_line(mapping = aes(x = data[[2]], y = data[[3]], color = Coal.Production))
ggplot(data) + geom_line(mapping = aes(x = data[[2]], y = data[[3]], group = Coal.Production))
ggplot(data) + geom_line(mapping = aes(x = data[[2]], y = data[[3]]))
data <- fread("USEnergy.csv", select = c("coal.production"))
data <- fread("USEnergy.csv", select = c("Coal.Production"))
View(USEnergy)
View(USEnergy)
ggplot(data, aes(x = data[[2]], y = data[[3]])) + geom_point()
data <- read_csv("USEnergy.csv")
ggplot(data, aes(x = data[[2]], y = data[[3]])) + geom_point()
data <- fread("USEnergy.csv", select = c("Coal.Production"))
data <- read_csv("USEnergy.csv", stringsAsFactors=FALSE)
data <- read_csv("USEnergy.csv", header = TRUE)
#Select columns from csv
data_table <- read.table("USEnergy.csv")
#Select columns from csv
data_table <- read.table("USEnergy.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
View(data_table)
View(data_table)
names(data_table)
data_table(2)
#Select columns from csv
data_table <- read.table("USEnergy.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
data_table(2)
#Select columns from csv
dataTable <- read.table("USEnergy.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
data_table(2)
dataTable(2)
dataTable("Coal.Production")
library(data.table)
data <- read_csv("USEnergy.csv")
#Just a test
ggplot(data) + geom_line(mapping = aes(x = data[[2]], y = data[[3]]))
#Scatterplot
ggplot(data, aes(x = data[[2]], y = data[[3]])) + geom_point()
#Select columns from csv
dataTable <- read.table("USEnergy.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
names(data_table)
dataTable("Year")
dataTable(Year)
dataTable[year]
dataTable[Year]
dataTable["Year"]
dataTable["Coal.Production"]
x1 <- dataTable["Coal.Production"]
y1 <- dataTable["Natural.Gas..Dry..Production"]
#Select 500 rows, and try only to work with that
#setwd("C:/Users/Mette/Documents/DataVisualization/Assignment")
library(readxl)
library(data.table)
library(ggplot2)
data <- read_csv("USEnergy.csv")
#Just a test
ggplot(data) + geom_line(mapping = aes(x = data[[2]], y = data[[3]]))
x1 <- dataTable["Coal.Production"]
y1 <- dataTable["Natural.Gas..Dry..Production"]
#Select columns from csv
dataTable <- read.table("USEnergy.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
x1 <- dataTable["Coal.Production"]
y1 <- dataTable["Natural.Gas..Dry..Production"]
#Scatterplot
ggplot(data, aes(x = x1, y = data[[3]])) + geom_point()
#Scatterplot
ggplot(data, aes(x = x1, y = y1)) + geom_point()
#Scatterplot
ggplot(dataTable, aes(x = x1, y = y1)) + geom_point()
data[[2]]
#Scatterplot
ggplot(data, aes(x = data[[2]], y = data[[3]])) + geom_point()
#Scatterplot
ggplot(data, aes(x = data[[2]], y = data[[3]]), xlab("Coal")) + geom_point()
#Scatterplot
ggplot(data, aes(x = data[[2]], y = data[[3]]), xlab("Coal")) + geom_point()
#Scatterplot
ggplot(data, aes(x = data[[2]], y = data[[3]])) + geom_point()
#Select columns from csv
dataTable <- read.table("USEnergy.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
names(data_table)
x1 <- dataTable["Coal.Production"]
y1 <- dataTable["Natural.Gas..Dry..Production"]
plot(x1,y1)
?plot
#Just a test
ggplot(data) + geom_line(mapping = aes(x = data[[2]], y = data[[3]]))
#Scatterplot
ggplot(data, aes(x = data[[2]], y = data[[3]])) + geom_point()
data <- read_csv("USEnergy.csv")
data <- read_csv("USEnergy.csv", show_col_types = FALSE)
ggplot(data)
head(data)
colnames(data)
ggplot(data = data, aes(x="Year",y="Coal.Production"))
ggplot(data = data, aes(x=Year,y=Coal.Production))
ggplot(data = data, aes(x=Year))
ggplot(data = data, aes(x=Year, y= Coal Production))
ggplot(data = data, aes(x=Year, y=Coal))
View(dataTable)
data <- read_csv("USEnergy.csv", show_col_types = FALSE)
ggplot(data = data, aes(x=Year, y=CoalProduction))
#Select columns from csv
dataTable <- read.table("USEnergy.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
names(data_table)
#Select columns from csv
dataTable <- read.table("USEnergy.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
names(dataTable)
x1 <- dataTable["CoalProduction"]
y1 <- dataTable["NaturalGasProduction"]
plot(x1,y1)
ggplot(data = data, aes(x=Year, y=CoalProduction))
#Just a test
ggplot(data) + geom_line(mapping = aes(x = data[[2]], y = data[[3]]))
#Scatterplot
ggplot(data, aes(x = data[[2]], y = data[[3]])) + geom_point()
ggplot(data = data, aes(x=Year, y=CoalProduction)) + geom_line()
ggplot(data = data, aes(x=Year, y=CoalProduction)) + geom_point()
